class NoiseEstimationSubnetwork(nn.Module):
    def __init__(self):
        super(NoiseEstimationSubnetwork, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.conv3 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(32, 32, kernel_size=3, padding=1)
        self.conv5 = nn.Conv2d(32, 3, kernel_size=3, padding=1)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = F.relu(self.conv3(x))
        x = F.relu(self.conv4(x))
        x = F.relu(self.conv5(x))
        return x

class NonBlindDenoisingSubnetwork(nn.Module):
    def __init__(self):
        super(NonBlindDenoisingSubnetwork, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.pool1 = nn.AvgPool2d(kernel_size=2, padding=0)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.conv5 = nn.Conv2d(128, 256, kernel_size=3, padding=1)
        self.pool2 = nn.AvgPool2d(kernel_size=2, padding=0)
        self.conv6 = nn.Conv2d(256, 256, kernel_size=3, padding=1)
        self.conv7 = nn.Conv2d(256, 256, kernel_size=3, padding=1)
        self.pool3 = nn.AvgPool2d(kernel_size=2, padding=0)
        self.conv8 = nn.Conv2d(256, 512, kernel_size=3, padding=1)
        self.conv9 = nn.Conv2d(512, 256, kernel_size=3, padding=1)
        self.upsample1 = nn.ConvTranspose2d(256, 256, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.conv10 = nn.Conv2d(256, 256, kernel_size=3, padding=1)
        self.conv11 = nn.Conv2d(256, 256, kernel_size=3, padding=1)
        self.upsample2 = nn.ConvTranspose2d(256, 256, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.conv12 = nn.Conv2d(256, 128, kernel_size=3, padding=1)
        self.conv13 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.conv14 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.upsample3 = nn.ConvTranspose2d(128, 64, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.conv15 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.conv16 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.out = nn.Conv2d(64, 3, kernel_size=1, padding=0)

    def forward(self, x):
        conv1 = F.relu(self.conv1(x))
        conv2 = F.relu(self.conv2(conv1))    
        pool1 = self.pool1(conv2)        
        conv3 = F.relu(self.conv3(pool1))
        conv4 = F.relu(self.conv4(conv3))
        conv5 = F.relu(self.conv5(conv4))
        pool2 = self.pool2(conv5)
        conv6 = F.relu(self.conv6(pool2))
        conv7 = F.relu(self.conv7(conv6))
        pool3 = self.pool2(conv7)
        conv8 = F.relu(self.conv8(pool3))
        conv9 = F.relu(self.conv9(conv8))
        upsample1 = F.relu(self.upsample1(conv9))
        conv10 = F.relu(self.conv10(upsample1))
        conv11 = F.relu(self.conv11(conv10))
        upsample2 = F.relu(self.upsample1(conv11))
        add1 = conv5 + upsample2
        conv12 = F.relu(self.conv12(add1))
        conv13 = F.relu(self.conv13(conv12))
        conv14 = F.relu(self.conv14(conv13))
        upsample3 = F.relu(self.upsample2(conv14))
        add2 = conv2 + upsample3
        conv15 = F.relu(self.conv15(add2))
        conv16 = F.relu(self.conv16(conv15))
        out = self.out(conv16)
        out = out + x
        return out

class CBDNet(nn.Module):
    def __init__(self):
        super(CBDNet, self).__init__()
        self.noise_estimation = NoiseEstimationSubnetwork()
        self.denoising = NonBlindDenoisingSubnetwork()

    def forward(self, x):
        noise_map = self.noise_estimation(x)
#       x = torch.cat((noise_map, x), dim=1)
        x = self.denoising(x)
        return x

# Create an instance of the model
model = CBDNet()
total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
print(f"Total Trainable Parameters: {total_params}")